version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.0.0
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0
  aws-parameter-store: circleci/aws-parameter-store@1.0.0

executors:
  node-executor:
    docker:
      - image: circleci/node:14.15.5-browsers
  docker-python:
    docker:
      - image: circleci/python:3.7

references:
  workspace_root: &workspace_root '~'
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

jobs:
  install-dependencies:
    executor: node-executor
    steps:
      - *attach_workspace
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - run:
          name: Set GitHub username and email
          command: git config user.email "ci@hackney.gov.uk" && git config user.name "lbhackney-automation"
      - save_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
            - /home/circleci/.cache/Cypress
      - persist_to_workspace:
          root: *workspace_root
          paths: .

  tests:
    executor: node-executor
    steps:
      - *attach_workspace
      - run:
          name: Run linter
          command: yarn lint
      - run:
          name: Run typecheck
          command: yarn type-check
      - run:
          name: Run tests
          command: yarn test -w 2

  e2e:
    executor: node-executor
    steps:
      - *attach_workspace
      - run:
          name: Run E2E
          command: yarn e2e
      # - store_artifacts:
      #     path: ~/project/cypress/screenshots
      # - store_artifacts:
      #     path: ~/project/cypress/videos

  owasp-zap-baseline-scan:
    machine:
      image: ubuntu-2004:202104-01
    steps:
      - checkout
      - *attach_workspace

      - run:
          name: Run application in background
          command: PORT=3000 yarn start
          background: true

      - run:
          name: Pull owasp zap docker image
          command: docker pull owasp/zap2docker-stable

      - run:
          name: ZAP baseline test of application
          # It will exit with codes of:
          # 0: Success
          # 1: At least 1 FAIL
          # 2: At least one WARN and no FAILs
          # 3: Any other failure
          # Link to above:https://github.com/zaproxy/zaproxy/blob/main/docker/zap-baseline.py#L31-L35
          command: |
              (
                docker run -t owasp/zap2docker-stable zap-baseline.py \
                -u https://raw.githubusercontent.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}/zap-baseline.conf \
                -t http://$(ip -f inet -o addr show docker0 | awk '{print $4}' | cut -d '/' -f 1):3000 || \
                if [[ $? == 0 || $? == 2 ]]; then exit 0; else exit 1; fi;
              )

  build-deploy-staging:
    executor: aws-cli/default
    steps:
      - *attach_workspace
      - run:
          name: deploy
          command: yarn install --production --ignore-scripts --prefer-offline && sudo npm i -g serverless && sls deploy --stage staging

  build-deploy-production:
    executor: aws-cli/default
    steps:
      - *attach_workspace
      - run:
          name: deploy
          command: yarn install --production --ignore-scripts --prefer-offline && sudo npm i -g serverless && sls deploy --stage production

  generate-draft-github-release:
    executor: aws-cli/default
    steps:
      - *attach_workspace
      - run:
          name: delete stale draft GitHub releases
          command: yarn delete-draft-github-releases
      - run:
          name: generate draft GitHub release
          command: yarn release --github.draft --no-git.push --no-git.tag

  generate-github-release:
    executor: aws-cli/default
    steps:
      - *attach_workspace
      - add_ssh_keys:
          fingerprints:
            - 'd0:bd:5a:9f:c3:17:88:3a:df:03:42:7b:f6:f7:3c:72'
      - run:
          name: delete stale draft GitHub releases
          command: yarn delete-draft-github-releases
      - run:
          name: generate release
          command: yarn release

  assume-role-staging:
    executor: docker-python
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: $AWS_ACCOUNT_STAGING
          profile_name: default
          role: 'LBH_Circle_CI_Deployment_Role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

  assume-role-production:
    executor: docker-python
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: $AWS_ACCOUNT_PRODUCTION
          profile_name: default
          role: 'circleci-assume-role'
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

  build:
    executor: node-executor
    steps:
      - *attach_workspace
      - run:
          name: Build app
          command: yarn build
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - project/build

  chromatic-deployment: 
    docker:
      - image: circleci/node:12
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run: yarn install
      - run: yarn chromatic --project-token=${CHROMATIC_PROJECT_TOKEN}

  # get-environment-variables:
  #   executor: aws-cli/default
  #   steps:
  #     - *attach_workspace
  #     - aws-cli/install
  #     - run:
  #         name: Load AWS params
  #         command: |
  #             mkdir -p /tmp/parameterstore/
  #             for row in $(aws ssm describe-parameters --no-paginate | jq -c '.Parameters[]'); do
  #               _jq() {
  #                 PARNAME=$(jq -r '.Name' \<<< "${row}")
  #                 PARDATA=$(aws ssm get-parameters --with-decryption --names "${PARNAME}" | jq '.Parameters[].Value')
  #                 if [ -z "$PARDATA" ]
  #                 then
  #                   echo "${PARNAME} appears to be empty. Please double check the value of this parameter."
  #                   exit 1
  #                 fi
  #                 if [ -f /tmp/parameterstore/"${PARNAME}" ]
  #                 then
  #                   echo "This value has already been stored. Is this value stored twice?"
  #                   exit 1
  #                 fi
  #                 echo "${PARDATA}" >> /tmp/parameterstore/"${PARNAME}"
  #                 echo "export ${PARNAME}=$(cat /tmp/parameterstore/"${PARNAME}")" >> /tmp/parameterstore/PARAMETERSTORESOURCEFILE
  #               }
  #               _jq
  #             done
  #             source /tmp/parameterstore/PARAMETERSTORESOURCEFILE

workflows:
  version: 2
  continuous-delivery:
    jobs:
      - install-dependencies
      - build:
          requires:
            - install-dependencies
      - chromatic-deployment:
          requires:
            - build
      - owasp-zap-baseline-scan:
          requires:
            - build
      # - tests:
      #     requires:
      #       - install-dependencies
      # - e2e:
      #     requires:
      #       - install-dependencies
      # - generate-draft-github-release:
      #     requires:
      #       - tests
      #       - e2e
      #     filters:
      #       branches:
      #         only: main
      - assume-role-staging:
          context: mosaic-staging-context
          filters:
            branches:
              only: 
                - develop
                - main
      # - get-environment-variables:
      #     requires:
      #       - assume-role-staging
      - build-deploy-staging:
          requires:
            - assume-role-staging
            - owasp-zap-baseline-scan
          filters:
            branches:
              only: 
                - develop
                - main
      - assume-role-production:
          context: api-assume-role-social-care-production-context
          requires:
            - build-deploy-staging
          filters:
            branches:
              only: main
      - build-deploy-production:
          requires:
            - assume-role-production
            - build
          filters:
            branches:
              only: main
      # - permit-deploy-production:
      #     type: approval
      #     requires:
      #       - build-deploy-staging
      #     filters:
      #       branches:
      #         only: develop
      # - assume-role-production:
      #     context: mosaic-production-context
      #     requires:
      #       - permit-deploy-production
      #     filters:
      #       branches:
      #         only: main
      # - build-deploy-production:
      #     requires:
      #       - assume-role-production
      #     filters:
      #       branches:
      #         only: main
      # - generate-github-release:
      #     requires:
      #       - build-deploy-production
      #     filters:
      #       branches:
      #         only: main
